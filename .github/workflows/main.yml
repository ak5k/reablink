# This is a basic workflow to help you get started with Actions

name: CMake Release

on:
  push:
    tags:
      - 'v[0-9]+.*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  ARCHIVE_NAME: ${{ github.event.repository.name }}
  COMPILER: ""
  UBUNTU_VERSION: ''

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      archive_tag: ${{ steps.vars.outputs.archive_tag }}
    steps:
      - name: set archive tag
        id: vars
        run: echo ::set-output name=archive_tag::${GITHUB_REF#refs/*/}
      - name: check archive tag
        env:
          ARCHIVE_TAG: ${{ steps.vars.outputs.archive_tag }}
        run: |
          echo $ARCHIVE_TAG
          echo ${{ steps.vars.outputs.archive_tag }}
          source /etc/lsb-release
          echo "UBUNTU_VERSION=$((${DISTRIB_RELEASE%.*}-2))" >> $GITHUB_ENV
      
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ReaBlink ${{ github.ref }}
          draft: true
          prerelease: false
    
    # ...
  release_assets:
    name: Release builds and assets
    needs: create_release # we need to know the upload URL
    runs-on: ${{ matrix.config.os }} # we run many different builds
    strategy:
      # just an example matrix
      # fail-fast: false
      matrix:
        config:
        - { os: windows-latest, arg1: '', arg2: "", arg3: "", arg4: "", arg5: ""}
        - { os: windows-latest, arg1: '', arg2: "", arg3: "", arg4: "-A", arg5: "Win32" }
        - { os: macos-latest, arg1: '', arg2: "-G", arg3: "Xcode", arg4: "-DCMAKE_OSX_ARCHITECTURES=\"arm64\"", arg5: '' }
        - { os: macos-latest, arg1: '', arg2: "-G", arg3: "Xcode", arg4: "-DCMAKE_OSX_ARCHITECTURES=\"x86_64\"", arg5: '' }
        # - { os: macos-latest, arg1: '', arg2: "", arg3: "-DCMAKE_CXX_COMPILER=/usr/local/bin/g++-11", arg4: "-DCMAKE_CXX_COMPILER_ARG1=-m32", arg5: "-D LINUX_CROSS=\"i386\"" }
        - { os: ubuntu-latest, arg1: '', arg2: "", arg3: "", arg4: "", arg5: "", linux_cross: "" }
        - { os: ubuntu-latest, arg1: '', arg2: "", arg3: "", arg4: "", arg5: "-D LINUX_CROSS=\"aarch64\"", linux_cross: "aarch64" }
        - { os: ubuntu-latest, arg1: '', arg2: "", arg3: "", arg4: "", arg5: "-D LINUX_CROSS=\"i686\"", linux_cross: "i686" }
        - { os: ubuntu-latest, arg1: '', arg2: "", arg3: "", arg4: "", arg5: "-D LINUX_CROSS=\"armv7l\"", linux_cross: "arm", armarg: 'eabi' }
          
    steps:
      # checkout of cource
      #- name: Checkout code
      #  uses: actions/checkout@v1
      # ... whatever build and packaging steps you need here
      # and finally do an upload!
      - uses: actions/checkout@v2
        with: 
          submodules: recursive
      
      - name: checkout latest tags
        shell: bash
        run: |
          cd ${{github.workspace}}/vendor/link
          git fetch --tags
          tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout $tag -b latest
          cd modules/asio-standalone
          git fetch --tags
          tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout $tag -b latest
          cd ${{github.workspace}}
        
      - if: ${{ runner.os == 'Linux' && matrix.config.linux_cross != '' }}
        name: linux cross
        run: |
          sudo apt install -y g++-$ARCH-linux-gnu$ARG binutils-$ARCH-linux-gnu$ARG
          echo "COMPILER=CXX=$ARCH-linux-gnu$ARG-g++" >> $GITHUB_ENV
        env:
          ARCH: ${{matrix.config.linux_cross}}
          ARG: ${{matrix.config.armarg}}
        
      - name: move wdl
        run: mv ./vendor/WDL/WDL ./vendor/reaper-sdk/

      - name: configure cmake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: ${{env.COMPILER}} cmake ${{matrix.config.arg2}} ${{matrix.config.arg3}} -B ${{github.workspace}}/build ${{matrix.config.arg4}} ${{matrix.config.arg5}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: build
        # Build your program with the given configuration
        run: ${{env.COMPILER}} cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      - name: cpack
        run: cpack --config ${{github.workspace}}/build/CPackConfig.cmake
        
      - name: Upload release assets
        #uses: actions/upload-release-asset@v1
        shell: bash
        run: |
          set -x
          assets=()
          for asset in ./package/ReaBlink*; do
            assets+=("-a" "$asset")
          done
          tag_name="${GITHUB_REF##*/}"
          hub release edit "${assets[@]}" -m "" "$tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
